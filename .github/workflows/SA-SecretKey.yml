name: '(SA Key via credentials_json) : Image Analysis Workflow'

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      IMAGE_NAME_TO_SCAN:
        description: 'Image to scan'
        required: true
        default: 'alpine'
      GCP_PROJECT_ID:
        description: 'GCP Project ID'
        required: true
        default: 'liangyutan-testproject'
      ORGANIZATION_ID:
        description: 'GCP Organization ID'
        required: true
        default: '986981441905'
      CONNECTOR_ID:
        description: 'Connector ID'
        required: true
        default: 'organizations/986981441905/locations/global/connectors/privatepreviewdemo'
      SCANNER_IMAGE:
        description: 'Scanner Docker image'
        required: true
        default: 'gcr.io/ci-plugin/updated-ci-scanning-multistage-build:latest'
      IMAGE_TAG:
        description: 'Image tag'
        required: true
        default: 'latest'
      IGNORE_SERVER_ERRORS:
        description: 'Ignore server errors'
        required: false
        type: boolean
        default: false

jobs:
  image-analysis-job:
    runs-on: ubuntu-latest

    env:
      IMAGE_NAME_TO_SCAN: 'alpine'
      GCP_PROJECT_ID: 'liangyutan-testproject'
      ORGANIZATION_ID: '986981441905'
      CONNECTOR_ID: 'organizations/986981441905/locations/global/connectors/privatepreviewdemo'
      SCANNER_IMAGE: 'gcr.io/ci-plugin/updated-ci-scanning-multistage-build:latest'
      IMAGE_TAG: 'latest'
      IGNORE_SERVER_ERRORS: 'false'

    steps:
      # Step 1: Authenticate using the SA Key JSON content
      # This replaces the manual file creation and gcloud auth activate...
      - name: 'Authenticate to Google Cloud'
        id: 'auth'
        uses: 'google-github-actions/auth@v2'
        with:
          # Pass the JSON key content directly
          credentials_json: '${{ secrets.GCP_SA_KEY }}'
          # We STILL need create_credentials_file for the Docker step later
          create_credentials_file: true

      # Step 2: Set up gcloud SDK
      # This will automatically pick up the credentials from the 'auth' step
      - name: 'Set up gcloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'
        # Only run if authentication succeeded
        if: steps.auth.outcome == 'success'

      # Step 3: Configure Docker for registries
      # This uses the gcloud authentication from the previous steps
      - name: 'Configure Docker for Artifact Registry'
        # Only run if authentication succeeded
        if: steps.auth.outcome == 'success'
        run: |
          gcloud auth configure-docker us-central1-docker.pkg.dev --quiet
          gcloud auth configure-docker gcr.io --quiet

      # Step 4: Fix Docker Socket Permissions
      - name: 'Fix Docker Socket Permissions'
        run: |
          sudo chmod 666 /var/run/docker.sock

      # Step 5: Run Image Analysis Scan and Handle Exit Codes
      - name: 'Run Image Analysis Scan'
        # Only run if authentication succeeded
        if: steps.auth.outcome == 'success'
        run: |
          echo "üì¶ Running container from scanner image..."

          # Determine values: Use manual inputs if available, otherwise use env defaults
          SCANNER_IMAGE="${{ github.event_name == 'workflow_dispatch' && github.event.inputs.SCANNER_IMAGE || env.SCANNER_IMAGE }}"
          GCP_PROJECT_ID="${{ github.event_name == 'workflow_dispatch' && github.event.inputs.GCP_PROJECT_ID || env.GCP_PROJECT_ID }}"
          ORGANIZATION_ID="${{ github.event_name == 'workflow_dispatch' && github.event.inputs.ORGANIZATION_ID || env.ORGANIZATION_ID }}"
          IMAGE_NAME="${{ github.event_name == 'workflow_dispatch' && github.event.inputs.IMAGE_NAME_TO_SCAN || env.IMAGE_NAME_TO_SCAN }}"
          IMAGE_TAG="${{ github.event_name == 'workflow_dispatch' && github.event.inputs.IMAGE_TAG || env.IMAGE_TAG }}"
          CONNECTOR_ID="${{ github.event_name == 'workflow_dispatch' && github.event.inputs.CONNECTOR_ID || env.CONNECTOR_ID }}"
          IGNORE_ERRORS="${{ github.event_name == 'workflow_dispatch' && github.event.inputs.IGNORE_SERVER_ERRORS || (env.IGNORE_SERVER_ERRORS == 'true') }}"

          exit_code=0

          # Run docker, mounting the credentials file created by the 'auth' step
          # and setting GCLOUD_KEY_PATH for your container's script.
          docker run --rm \
            -v /var/run/docker.sock:/var/run/docker.sock \
            -v ${{ steps.auth.outputs.credentials_file_path }}:/tmp/scc-key.json \
            -e GCLOUD_KEY_PATH=/tmp/scc-key.json \
            -e GCP_PROJECT_ID="${GCP_PROJECT_ID}" \
            -e ORGANIZATION_ID="${ORGANIZATION_ID}" \
            -e IMAGE_NAME="${IMAGE_NAME}" \
            -e IMAGE_TAG="${IMAGE_TAG}" \
            -e CONNECTOR_ID="${CONNECTOR_ID}" \
            -e BUILD_TAG="${{ github.workflow }}" \
            -e BUILD_ID="${{ github.run_number }}" \
            "${SCANNER_IMAGE}" \
            || exit_code=$?

          echo "Docker run finished with exit code: $exit_code"

          # --- Replicate Jenkins Exit Code Logic ---
          if [ $exit_code -eq 0 ]; then
            echo "‚úÖ Evaluation succeeded: Conformant image."
          elif [ $exit_code -eq 1 ]; then
            echo "‚ùå Scan failed: Non-conformant image (vulnerabilities found)."
            exit 1 # Fail the step
          else
            if [ "$IGNORE_ERRORS" = "true" ]; then
              echo "‚ö†Ô∏è Server/internal error occurred (Code: $exit_code), but IGNORE_SERVER_ERRORS=true. Proceeding."
            else
              echo "‚ùå Server/internal error occurred (Code: $exit_code) during evaluation. Set IGNORE_SERVER_ERRORS=true to override."
              exit 1 # Fail the step
            fi
          fi
